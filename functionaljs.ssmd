= Functional Javascript
== Wat?!
_


=== Outline
# Introduction
# Programming Paradigms
# Blow peoples' minds
#* Javascript is multi-paradigm
#*# Imperative
#*# Object Oriented
#*# Functional
# Focus on Functional
#* Wikipedia
#* Concepts of Functional
# Write functional Javascript
# fin.
_


=== About me - Joshua Kalis
Front-end engineer for @QuickenLoans.
* http://joshuakalis.com
* @kalisjoshua
_


=== Where did this guy come from?
* Started as a Graphic Designer
** NO PROGRAMMING
* Moved to Web Design
** Images
** CSS
** HTML
* Picked up ASP Classic
* Forced to learn Javascript (HATED all of it!)
* Learned a little of these
** PHP4
** C# .NET 2.0
** Java
* Began to LOVE Javascript
_


=== About me - Joshua Kalis
Front-end engineer for @QuickenLoans and I love Javascript!
* http://joshuakalis.com
* @kalisjoshua
_


=== What are the bad parts of Javascript?
* Variables is free to be overwritten at any time
* Type coersion within equality checks are unreliable
* The "this" value can be tricky for n00bs
* Blocks are optional for control structures
* Switch fall-through
* The "arguments" object inside function calls
* Automatic semi-colon insertion
* The difference in function statements and expressions
* I rarely use these
** eval
** with
** continue
** Typed wrappers: new Boolean(true), new Number(9), new Array(), etc.
** new (necessary at times but abstracted away from users)
** void
* Unused reserved words
* Unicode
* The typeof operator is in accurate
* Floating point numbers: 0.1 + 0.2 !== 0.3
* The plus (+) operator doing double duty as addition and concatenation
* Hoisting
* NaN... Nyan cat?
_


=== What is there to love about Javascript?
* Ubiquitous
** It's almost everywhere
** Setup is done for you
* Forgiving
** Making mistakes might still achieve the goal you want
** Easy to start programming
* Useful
** People like having interactive web pages
** Employable skill
* Multiparadigm
** Write however you want
* and more probably
_


<!-- 
    misc
        2 types of side effects
        the UNIX philosophy
            do one thing
            work together - composition
    Why is functional programming a good thing? What benefits can be gained?
        lazyness - write once, use over and over everwhere
        test-ability leads to confidence in the execution
        purity/referential transparency
            caching/memoizing
        reduced function length and complexity
    Traditionally in OOP functions (methods) must be a part of an object
        lamba expressions
 -->


=== Programming Paradigms
* Imperative (Proceedural, Structured)
* Object Oriented
* Functional
* Others - yes there are lots.
_


=== Imperative
---
var message = "Hello ";
var promptMessage = "What is your name?";
var name = prompt(promptMessage);
alert(message + name);
---
# Set some variables
# Ask the user for their name and store that to a variable
# Finally we greet them with a message including their name.
Do we see the "Proceedure" here?
_


=== Object Oriented
---
function Greeting (name) {
    this.name = name;
}
Greeting.promptMessage = "What is your name?";
Greeting.prototype.say = function (message) {
    alert(message + this.name);
}
var user = new Greeting(prompt(Greeting.promptMessage));
user.say("Hello ");
---
Here we gain some reusability, albeit with some verbosity.
# Define a "class"; see the quotes, because Javascript doesn't truly have classes.
#* Added a "static" property; that is publically available
#* Added a type-based method; prototypically inherited by all instances
# Create an instance of the "class" with an instance variable of the user's name.
# Greet the user with a message including their name.
_


=== I write a lot of non-functional Javascript
---
$.fn.ready(function () {
    $(".lookingForPlugins")
        .initializePlugin({
            myOptions: "Sea Turtles"
            ,noopCallback: function () {}
        });
});
---
Just to set you at ease, I am not a functional Javascript doyen writing everything in a functional manner. Actually, from time to time, I even write Javascript that doesn't even function.
---
function myAwesomeness (arg) {
    // do the most awesome thing to arg
    // fully unit tested
    // purely functional
}
...
myAwesomeness(); // derp derp
---
_


= SO?!
== None of that really lends itself to functional.
_


=== What is Functional?
    "In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It emphasizes the application of functions, in contrast to the imperative programming style, which emphasizes changes in state. Functional programming has its roots in lambda calculus, a formal system developed in the 1930s to investigate function definition, function application, and recursion. Many functional programming languages can be viewed as elaborations on the lambda calculus." ~~ [wikipedia(1)](http://en.wikipedia.org/wiki/Functional_programming)
_


= That's Boring!
== Much like the design of this presentation...
_


=== What does functional mean?
* Purity (referentially transparent)
* Functions as values
* Higer order functions
* Closure/lexical scoping
* Curry-ing/partial application
* Composition
* Lazy evaluation
* Continuations
_


=== Purity
* Treats computation as the evaluation of mathematical functions
* AVOIDS state and mutable data; doesn't necessarily eliminate it
* For a (input) value x there is a (output) value y
---
function sum (a, b) {
    return a + b;
}
// ...
sum(1, 2); // returns 3, every time.
---
This is referentially transparent, meaning it can be logically reasoned about and the input dictates the output. Testing this will be straight-forward and reliable.
_


=== Impurity
Relying on side effects leads to problems and brain-ache.
---
var total = 0;
function performSale (x) {
    total = total + x * 1.06;
}
log(total); // returns 0
performSale(10);
log(total); //returns 10.600000000000001
---
Now this code is reliant on a lot of things happening as intended such as no one changing total directly. It is also less reliably testable.
_


=== Functions as values
* A function is a "value" (object or thing) that can be assigned to an "identifier" (or variable)
This declaration:
---
function add (a, b) {
    return a + b;
}
---
... is very similar to this declaration:
---
var add = function (a, b) {
    return a + b;
}
---
The only difference being when they are initialized in the Javascript interpreter. The end result is the same; a function identified as "add".
_


=== Functions as values (cont.)
Now, this:
---
var add = function (a, b) {
    return a + b;
}
---
... should look very similar to:
---
var myNumber = 9;
---
... and this should make perfect sense:
---
var add = function (a, b) {
    return a + b;
}
var computation = function (fn, value) {
    return fn(value, value);
}
computation(add, 9); // returns 18
---
_


=== Higher Order Functions
* Takes a function as an argument (or)
* Returns a function as a result
Examples: map, filter, forEach/each, some, every, click, focus, load, keydown, ... etc.
---
var a = [1,2,3,4,5];
var double = function (x) {
    return x * 2;
}
a.map(double); // returns [2,4,6,8,10]
---
... or
---
$("a#clicker")
    .on("click", function (event) {
        event.preventDefault();
        alert("ooooo, do it again.");
    });
---
_


=== Closure/lexical scoping
* Objects retain access to the context (scope) in which they were created
---
var formatter = function (str) {
    return "Want to know a secret? " + str;
}
var myObj = (function (fn) {
    var hidden = "I have a secret."
    return {
        get: function () { return fn(hidden); }
        ,set: function (newValue) { hidden = newValue; }
    };
}(formatter));

myObj.get(); // returns "Want to know a secret? I have a secret."
myObj.set("Javascript is awesome!");
myObj.get(); // returns "Want to know a secret? Javascript is awesome!"
myObj.hidden; // undefined
---
_


=== Curry-ing/partial application
_


=== Composition
_


=== Lazy evaluation
[StreamJS(4)](http://streamjs.org/)
_


=== Continuations
http://marijnhaverbeke.nl/cps/
_




    "Programming in a functional style can also be accomplished in languages that aren't specifically designed for functional programming." ~~ [wikipedia(1)](http://en.wikipedia.org/wiki/Functional_programming)

We can gain some of the benefits that Functional teaches us by just working in that way - don't rely on side affects.
_


=== Point Free
_


= #FunctionalJS
== Go forth and be productive
_


=== Resources
# http://en.wikipedia.org/wiki/Functional_programming
# http://www.defmacro.org/ramblings/fp.html
# http://cjohansen.no/talks/2012/sdc-functional/#1
# http://streamjs.org/
_


= Joshua T Kalis
== August 2012
