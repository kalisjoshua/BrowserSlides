= Functional Javascript
== Wat?!
_


=== Agenda
* Introduction
* Functional Concepts
* Examples
_


==+ Introduction
I am a Front-end engineer for @QuickenLoans. I love making things that work (functional).
* [JoshuaKalis.com](http://joshuakalis.com)
* [@kalisjoshua](http://twitter.com/kalisjoshua)
* [Github.com/kalisjoshua](https://github.com/kalisjoshua)
_


=== Where did this guy come from?
# Started as a Graphic Designer
#* NOT a programmer
# Moved to Web Design
#* Images
#* CSS
#* HTML
# Picked up ASP Classic
# Forced to learn Javascript (HATED all of it!)
# Learned a little of these
#* PHP4
#* C# .NET 2.0
#* Java
# Began to LOVE Javascript
Self taught mostly.
_


= Joshua Kalis
== I love Javascript! So I might be biased.
_


=== What am I trying to accomplish here?
* Concepts of functional programming
* How in Javascript
* Teach myself -  basically I don't care about any of you
_


=== What are the bad parts of Javascript?
* Variables is free to be overwritten at any time
* Type coercion within equality checks are unreliable
* The 'this' value can be tricky for n00bs (as well as everyone else from time to time)
* Blocks are optional for control structures
* Switch fall-through
* The 'arguments' object inside function calls
* Automatic semi-colon insertion
* The difference in function statements and expressions
* I rarely use these
** eval
** with
** continue
** Typed wrappers: new Boolean(true), new Number(9), new Array(), etc.
** new (necessary at times but abstracted away from users)
** void
* Unused reserved words
* Unicode
* The typeof operator is in accurate
* Floating point numbers: 0.1 + 0.2 !== 0.3
* The plus (+) operator doing double duty as addition and concatenation
* Hoisting
* NaN... Nyan cat?
_


=== What is there to love about Javascript?
* Ubiquitous
** It's almost everywhere
** Setup is done for you
* Forgiving
** Making mistakes might still achieve the goal you want
** Easy to start programming
* Useful
** People like having interactive web pages
** Employable skill
* Multi-paradigm
** Write however you want
* and more (probably)...
_


==+ Programming Paradigms
* Imperative (Procedural, Structured)
* Object Oriented
* Functional
* Others - yes there are lots.
_


=== Imperative
---
var message = 'Hello ';
var promptMessage = 'What is your name?';
var name = prompt(promptMessage);
alert(message + name);
---
# Set some variables
# Ask the user for their name and store that to a variable
# Finally we greet them with a message including their name.
Do we see the 'Proceedure' here?
_


=== Object Oriented
---
function Greeting (name) {
    this.name = name;
}
Greeting.promptMessage = 'What is your name?';
Greeting.prototype.say = function (message) {
    alert(message + this.name);
}
var name = prompt(Greeting.promptMessage);
var user = new Greeting(name);
user.say('Hello ');
---
Here we gain some re-usability, albeit with some verbosity.
# Define a 'class'; see the quotes, because Javascript doesn't truly have classes.
#* Added a 'static' property; that is publicly available
#* Added a type-based method; prototypically inherited by all instances
# Create an instance of the 'class' with an instance variable of the user's name.
# Greet the user with a message including their name.
_


=== I write non-functional Javascript
---
function validate (form) {
    email = /\bvalidate-[^e,\s]*e[^e,\s]*\b/;
    date = /\bvalidate-[^d,\s]*d\d[^d,\s]*\b/;
    for (var i = 0; i < form.length; i++) {
        if (valid) {
            emailField = email.test(node.className) && trim(node.value) != "";
            dateField = date.test(node.className) && trim(node.value) != "";
            if (emailField) {/* do more conditionals and state changing */}
            if (dateField)  {/* do more conditionals and state changing */}
        }
    }
}
---
Just to set you at ease, I am not a functional Javascript doyen writing everything in a functional manner. Actually, from time to time, I even write Javascript that doesn't even function.
---
function myAwesomeness (arg) {
    // do the most awesome thing to arg, fully unit tested, purely functional
}
...
myAwesomeness(); // derp derp
---
_


= SO?!
== None of that really lends itself to functional.
_


<!-- 
    misc
        2 types of side effects
        the UNIX philosophy
            do one thing
            work together - composition
    Why is functional programming a good thing? What benefits can be gained?
        laziness - write once, use over and over everywhere
        test-ability leads to confidence in the execution
        purity/referential transparency
            caching/memoizing
        reduced function length and complexity
    Traditionally in OOP functions (methods) must be a part of an object
        lambda expressions
 -->


==+ What is Functional?
    'In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It emphasizes the application of functions, in contrast to the imperative programming style, which emphasizes changes in state. Functional programming has its roots in lambda calculus, a formal system developed in the 1930s to investigate function definition, function application, and recursion. Many functional programming languages can be viewed as elaborations on the lambda calculus.' ~~ [wikipedia](http://en.wikipedia.org/wiki/Functional_programming)
_


= That's Boring!
== Much like the design of this presentation...
_


=== What does functional mean?
Here are the topics I found to be most talked about within the FP research that I performed for this talk.
* Purity (referentially transparent)
* Functions as values
* Higher order functions
* Closure/lexical scoping
* Curry-ing/partial application
* Composition
* Lazy evaluation
* Continuations
_


=== Purity
* Treats computation as the evaluation of mathematical functions
* AVOIDS state and mutable data; doesn't necessarily eliminate it
* For a (input) value x there is a (output) value y
---
function sum (a, b) {
    return a + b;
}
// ...
sum(1, 2); // returns 3, every time.
---
This is referentially transparent, meaning it can be logically reasoned about and the input dictates the output. Testing this will be straight-forward and reliable.
_


=== Impurity
Relying on side effects leads to problems and brain-ache.
---
var total = 0;
function performSale (x) {
    total = total + x * 1.06;
}
log(total); // returns 0
performSale(10);
log(total); //returns 10.600000000000001
---
Now this code is reliant on a lot of things happening as intended such as no one changing total directly. It is also less reliably testable.
_


=== Functions as values
* A function is a 'value' (object or thing) that can be assigned to an 'identifier' (or variable)
This declaration:
---
function add (a, b) {
    return a + b;
}
---
... is very similar to this declaration:
---
var add = function (a, b) {
    return a + b;
}
---
The only difference being when they are initialized in the Javascript interpreter. The end result is the same; a function identified as 'add'.
    'Function Expressions and Functional Programming are inseparable.' ~~ [JavaScript JavaScript](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/)
_


=== Functions as values (cont.)
Now, this:
---
var add = function (a, b) {
    return a + b;
}
---
... should look very similar to:
---
var myNumber = 9;
---
... and this should make perfect sense:
---
var add = function (a, b) {
    return a + b;
}
var computation = function (fn, value) {
    return fn(value, value);
}
computation(add, 9); // returns 18
---
_


=== Higher Order Functions
* Takes a function as an argument (or)
* Returns a function as a result
Examples: map, filter, forEach/each, some, every, click, focus, load, keydown, ... etc.
==== Functions as arguments
---
var a = [1,2,3,4,5];
var double = function (x) {
    return x * 2;
}
a.map(double); // returns [2,4,6,8,10]
---
... or
---
$('a#clicker')
    .on('click', function (event) {
        event.preventDefault();
        alert('ooooo, do it again.');
    });
---
_


=== Higher Order Functions (cont.)
Examples: bind, 'factories', others..........
==== Functions as returned values
---
// add factory
function makeAdder (preValue) {
    return function (x) {
        return preValue + x;
    };
}
var add5 = makeAdder(5);
add5(10);   // returns 15
add5(1000); // returns 1005
add5(-4);   // returns 1
---
or...
---
function add (a, b) {
    return a + b;
}
var add5 = add.bind(null, 5); // partial function application 'topic coming soon'
---
_


=== IIFE - Immediately Invoked Function Expression
Simple math: 1 + (2 + 3) + 4 = 10
Reduces to: 1 + 5 + 4 = 10
---
var add = function (a, b) {return a + b;};
add(1, 2); // returns 3 every time

// Baby step, remember from math class, parens are just grouping
(add)(1, 2);

// A slightly bigger step
(function (a, b) {return a + b;})(1, 2);

// Just different formatting
(function (a, b) {
    return a + b;
})(1, 2);
---
_


=== Closure/lexical scoping
* Objects retain access to the context (scope) in which they were created
---
var formatter = function (str) {
    return 'Want to know a secret? ' + str;
}
var myObj = (function (fn) {
    var hidden = 'I have a secret.'
    var innerObj = {
        get: function () { return fn(hidden); }
        ,set: function (newValue) { hidden = newValue; }
    };
    return innerObj;
}(formatter));

myObj.get();  // returns 'Want to know a secret? I have a secret.'
myObj.set('Javascript is awesome!');
myObj.get();  // returns 'Want to know a secret? Javascript is awesome!'
myObj.hidden; // undefined
---
_


=== Scope Chain
+++
program execution drills down through scopes
          &darr;
+-------------------+
|    Global Scope   |
|-------------------|
| Namespace Context | &larr; single global namespace object (omitted)
|-------------------|
|    IIFE Context   | &larr; innerObj is assigned to myObject through closure
|-------------------|
|        ...        |
|-------------------|
| Execution Context | &larr; myObj.get has privileged access to hidden
+-------------------+
          &uarr;
variable resolution looks up the scope chain until hitting global
+++
_


=== Curry-ing/partial application
Reducing the number of arguments by applying others previously.
---
function add (a, b) {
    return a + b;
}
var add5 = add.bind(null, 5);
---
The bind method of the Function object allows us to do two things:
# Explicitly set the context a function will execute with; value of 'this' inside the function
# Pre-determine arguments that will be passed in
---
// !WARNING! unsafe for actual use
function bind (fn, context, args) {
    return function () {
        fn.apply(context, args.concat(arguments));
    }
}
var add5 = bind(add, null, [5]);
add5(10); // returns 15
add5(-4); // returns 1
---
_


=== Composition
A new function that, when called, will pass the output of one function call as the input of the next and so on through all functions in the composition.
---
function fnA (_) { return _ + 2; }
function fnB (_) { return _ * 3; }
function fnC (_) { return _ - 5; }
// ...
var resultA = fnA(7);           // 9
var resultB = fnB(resultA);     // 27
var resultC = fnC(resultB);     // 22
// or
var result = fnC(fnB(fnA(7)));  // 22
---
with composition:
---
var compositionABC = compose(fnA, fnB, fnC);
var result = compositionABC(7);             // 22
// ...
var map = [13, 17, 23].map(compositionABC); // [40, 52, 70]
---

Reusable, Passable, Composable, Testable, and more.
_


=== Lazy evaluation
Known as Generators, Sequences, or Streams ([StreamJS](http://streamjs.org/)), these constructs only return values on-demand. Collections of infinite length are actually workable without enormous processing power.
---
var jsArray = [1,2,3,4,5,6,7,8,9/*...*/];
var simple = Stream.range();

jsArray.length;  // returns, however many were added to this point
simple.length(); // returns... umm, infinitely loops as it attempts to find the end

simple.take(10).length(); // returns 10
---
Checkout Stream and do some cool things. I would love to see it!
_


=== Continuations
    "[a reification of] an instance of a computational process at a given point in the process's execution" ~~ [http://eriwen.com/](http://eriwen.com/javascript/cps-tail-call-elimination/)
Javascript does not support Continuations natively; however, the Rhino environment does provide them as first-class objects.
* Resume execution with pre-existing state
* Return values from a function multiple times with (possibly) different values
_


=== Continuation-Passing Style (CPS)
Commonly known as callbacks in the Javascript community.
---
magicAJAX({
    data: JSON.stringify({name: 'Joshua', rank: 'AWESOME', serial_number: 1})
    ,fail: function (err, data) {/* fail gracefully with a curtsy :)~ */}
    ,success: function (data)   {/* do stuff with the retrieved data */}
    ,url: 'http://some_domain.tld/folder/file.ext'
});
---
Possible stack overflow problems for deeply nested calls due to no tail optimization.
    "No procedure is allowed to return to its caller--ever... Procedures can take a callback to invoke upon their return value." ~~ [By example: Continuation-passing style in JavaScript](http://matt.might.net/articles/by-example-continuation-passing-style/)
_


    "Programming in a functional style can also be accomplished in languages that aren't specifically designed for functional programming." ~~ [wikipedia](http://en.wikipedia.org/wiki/Functional_programming)

We can gain some of the benefits that Functional offers us by just working in that way - don't rely on side affects.
_


= Example Time!
_


=== Point Free
_


= #FunctionalJS
== Go, now, and be functional
_


=== Resources
# [Functional Programming - Wikipedia](http://en.wikipedia.org/wiki/Functional_programming)
# [Functional Programming For The Rest of Us](http://www.defmacro.org/ramblings/fp.html)
# [Pure, functional JavaScript](http://cjohansen.no/talks/2012/sdc-functional/#1)
# [Stream.js](http://streamjs.org/)
# [Functional Programming - igstan.ro](http://igstan.ro/files/functional-programming.pdf)
# [Function Declarations vs. Function Expressions](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/)
# [By example: Continuation-passing style in JavaScript](http://matt.might.net/articles/by-example-continuation-passing-style/)
# [Continuation-Passing Style](http://marijnhaverbeke.nl/cps/)
_


= Joshua T Kalis
== August 2012
_
